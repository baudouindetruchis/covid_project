# -*- coding: utf-8 -*-
"""age_prediction_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N2aXa7EHZL1ITlHnnCJ6L-b585ihNusm
"""

import scipy.io
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import tensorflow as tf
import keras
from keras.preprocessing import image
from keras.models import Model, Sequential
from keras.models import model_from_json
import matplotlib.pyplot as plt
from PIL import Image

from keras.models import load_model

# chemin vers le model ici
model_path = 'D:/Prog/Anaconda/workspace/age_prediction/classification_age_model_v2.hdf5'
model = load_model(model_path)

# V1 avec 80% de accuracy pour 500 epochs et dataset avec 2247 éléments (emphasizes sur les vieux) + Datagen
# V2 avec 87-90% accuracy pour 1000 epochs et dataset avec ~3000 éléments + Datagen

#%%

# fonction pour load les images en array
def loadImage(filepath):
    test_img = image.load_img(filepath, target_size=(224, 224))
    test_img = image.img_to_array(test_img)
    # test_img = np.expand_dims(test_img, axis = 0)
    test_img /= 255
    return test_img
#


output_indexes = np.array([i for i in range(0, 101)])
# Fonction pour faire la prédiction avec notre modèle
#
# Appeler la fonction en mettant la valeur 1 en deuxième paramètre permet 
# d'afficher tous les graph avec les images correspondantes ainsi que 
# les classes les plus élevées et les moyennes des prédictions
#
# Mettre autre chose que 1 sur ce second paramètre forcera la fonction
# à uniquement retourner 2 listes: 1 avec toutes les prédictions d'âge 
# (classe la plus élevée à chaque fois et non la moyenne)
# et 1 autre liste avec le taux de mortalité affilié à chaque personne
# selon sa tranche d'âge
def predict_age( img_list, index ):
    pred_moy = [] 
    danger_level = []

    for element in img_list:
        if (index==1):
            plt.imshow(element)
            plt.show()

        element = np.expand_dims(element, axis = 0)
        prediction = model.predict(element)
        apparent_age = np.round(np.sum(prediction * output_indexes, axis = 1))

        if (index==1):
            print("apparent age: ", int(apparent_age[0]))
            print("most dominant age class (not apparent age): ",np.argmax(prediction))
            if (int(apparent_age[0]) < 45):
                print("1% mortality rate according to age only")
            if (int(apparent_age[0]) >= 45 and int(apparent_age[0]) <= 64):
                print("10% mortality rate according to age only")
            if (int(apparent_age[0]) >= 65 and int(apparent_age[0]) <= 74):
                print("18% mortality rate according to age only")
            if (int(apparent_age[0]) >= 75):
                print("71% mortality rate according to age only")
        pred_moy.append(int(apparent_age[0]))

        if (index==1):
            y_pos = np.arange(101)
            plt.bar(y_pos, prediction[0], align='center', alpha=0.3)
            plt.ylabel('percentage')
            plt.title('age')
            plt.show()

    for element in pred_moy:
        if (element < 45):
            danger_level.append("1% mortality rate")
        if (element >= 45 and element <= 64):
            danger_level.append("10% mortality rate")
        if (element >= 65 and element <= 74):
            danger_level.append("18% mortality rate")
        if (element >= 75):
            danger_level.append("71% mortality rate")
            
    return pred_moy, danger_level


# les images en input
picture1 = "D:/Prog/Anaconda/workspace/age_prediction/adroitewoman.jpg" 
picture2 = "D:/Prog/Anaconda/workspace/age_prediction/agauchewoman.jpg"
picture3 = "D:/Prog/Anaconda/workspace/age_prediction/vieuxman.jpg" 
picture4 = "D:/Prog/Anaconda/workspace/age_prediction/vieuxpensifman.jpg" 

# load les images en array
img1 = loadImage(picture1)
img2 = loadImage(picture2)
img3 = loadImage(picture3)
img4 = loadImage(picture4)

liste_picture_array = []
liste_picture_array.append(img1)
liste_picture_array.append(img2)
liste_picture_array.append(img3)
liste_picture_array.append(img4)
#

predict_age(liste_picture_array, 1)

# la source utilisée pour les différents taux de mortalité
# source = image.load_img("D:/Prog/Anaconda/workspace/age_prediction/source.png")
# plt.figure(figsize = (12,10))
# plt.title("Taux de mortalité par tranche d'âge, source: statistica")
# plt.imshow(source)
# plt.show()

